{
  "name": "zform",
  "type": "registry:block",
  "registryDependencies": [
    "alert",
    "badge",
    "button",
    "command",
    "checkbox",
    "form",
    "input",
    "label",
    "popover",
    "select",
    "switch",
    "textarea"
  ],
  "files": [
    {
      "path": "./zform/context.ts",
      "content": "import { createContext, useContext } from \"react\";\nimport { ParsedField, ParsedSchema, ZodObjectOrWrapped } from \"./core/types\";\nimport { Config, FieldConfig } from \"./types\";\n\nimport { getDescriptions, getLabel } from \"./core/parser\";\nimport { getFieldComponent } from \"./components/fields\";\n\nexport type ZContextType<\n  TSchema extends ZodObjectOrWrapped = ZodObjectOrWrapped\n> = ParsedSchema & {\n  config: Config<TSchema>;\n};\nconst ZFormContext = createContext<ZContextType | null>(null);\n\nexport const ZFormProvider = ZFormContext.Provider;\n\nexport function useZForm() {\n  const context = useContext(ZFormContext);\n  if (!context) {\n    throw new Error(\"useZForm must be used within an ZFormProvider\");\n  }\n\n  return context;\n}\nexport function useZField(field: ParsedField, path: string[]) {\n  const { config } = useZForm();\n\n  function getFieldConfig(): FieldConfig & {\n    fieldLabel: string;\n    fieldDescription?: string;\n  } {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let currentConfig: any = config;\n\n    // Traverse the config based on the path\n    for (const segment of path) {\n      if (!currentConfig) break;\n\n      // Handle array indices by generalizing to the array level\n      if (Number.isInteger(Number(segment))) {\n        // If the current segment is an index, move up to the array level\n        if (\"*\" in currentConfig) {\n          currentConfig = currentConfig[\"*\"];\n        }\n        continue; // Skip numeric indices\n      }\n\n      // Move to the next nested configuration\n      currentConfig = currentConfig[segment];\n    }\n    // Extract overrides if the resolved configuration exists\n    if (currentConfig) {\n      const { labelOverride, descriptionOverride, ...other } = currentConfig;\n      return {\n        fieldLabel: labelOverride || getLabel(field),\n        fieldDescription: descriptionOverride || getDescriptions(field),\n        ...other,\n      };\n    }\n\n    return {\n      fieldLabel: getLabel(field),\n      fieldDescription: getDescriptions(field),\n    };\n  }\n\n  const fieldConfig = getFieldConfig();\n  const FieldComponent = getFieldComponent(\n    field.type,\n    fieldConfig.typeOverride\n  );\n  return { name: path.join(\".\"), FieldComponent, ...fieldConfig };\n}\n",
      "type": "registry:block",
      "target": "~/zform/context.ts"
    },
    {
      "path": "./zform/field.tsx",
      "content": "import React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport {\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\n\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { AlertCircle } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { ZFieldProps } from \"./types\";\nimport { useZField } from \"./context\";\n\nexport const ZField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const {\n    FieldComponent,\n    name,\n    className,\n    fieldLabel,\n    fieldDescription,\n    typeOverride,\n  } = useZField(field, path);\n  const { control } = useFormContext();\n\n  if (!FieldComponent)\n    return (\n      <Alert variant=\"destructive\" className=\"h-full\">\n        <AlertCircle className=\"size-4\" />\n        <AlertTitle className=\"flex gap-2\">\n          <span>\n            Unhandled field of type <b>{field.type}</b>\n          </span>\n          {typeOverride && (\n            <span>\n              with type override <b>{typeOverride}</b>\n            </span>\n          )}\n        </AlertTitle>\n        <AlertDescription> - {field.key}</AlertDescription>\n      </Alert>\n    );\n  if (field.type === \"array\")\n    return <FieldComponent field={field} path={path} />;\n  if (field.type === \"object\")\n    return <FieldComponent field={field} path={path} />;\n  if (field.type === \"boolean\")\n    return (\n      <FormField\n        name={name}\n        control={control}\n        render={() => (\n          <FormItem\n            className={cn(\n              \"flex flex-row justify-start space-x-3 space-y-0\",\n              className\n            )}\n          >\n            <FormControl>\n              <FieldComponent field={field} path={path} />\n            </FormControl>\n\n            <div className=\"space-y-1 leading-none\">\n              <FormLabel>{fieldLabel}</FormLabel>\n              <FormDescription>{fieldDescription}</FormDescription>\n              <FormMessage />\n            </div>\n          </FormItem>\n        )}\n      />\n    );\n  return (\n    <FormField\n      name={name}\n      control={control}\n      render={() => (\n        <FormItem className={className}>\n          <FormLabel>{fieldLabel}</FormLabel>\n          <FormControl>\n            <FieldComponent field={field} path={path} />\n          </FormControl>\n          <FormDescription>{fieldDescription}</FormDescription>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/field.tsx"
    },
    {
      "path": "./zform/form.tsx",
      "content": "\"use client\";\nimport React, { useEffect } from \"react\";\nimport { useForm, DefaultValues } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { ZFormProvider } from \"./context\";\nimport { Form } from \"@/components/ui/form\";\nimport { Button } from \"@/components/ui/button\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { getDefaultValues, parseSchema } from \"./core/parser\";\nimport { ZField } from \"./field\";\nimport { ZFormProps } from \"./types\";\nimport { ZodObjectOrWrapped } from \"./core/types\";\nimport { cn } from \"@/lib/utils\";\n\nexport function ZForm<TSchema extends ZodObjectOrWrapped>({\n  schema: inputSchema,\n  defaultValues,\n  className,\n  children,\n  onSubmit = () => {},\n  withSubmit = false,\n  withReset = false,\n  onFormInit = () => {},\n  formProps = {},\n  config = {},\n  submitProps = {},\n  resetProps = {},\n  header,\n  footer,\n}: ZFormProps<TSchema>) {\n  const { fields, schema } = parseSchema(inputSchema);\n  const form = useForm<z.infer<typeof schema>>({\n    resolver: zodResolver(schema),\n    defaultValues:\n      defaultValues ||\n      (getDefaultValues(schema) as DefaultValues<z.infer<TSchema>>),\n  });\n\n  useEffect(() => {\n    if (onFormInit) {\n      onFormInit(form);\n    }\n  }, [onFormInit, form]);\n\n  return (\n    <Form {...form}>\n      <ZFormProvider\n        value={{\n          fields,\n          schema,\n          config,\n        }}\n      >\n        <div className={cn(\"flex flex-col max-w-screen-sm gap-4\", className)}>\n          {header}\n          {form.formState.errors.root?.message && (\n            <p className=\"text-[0.8rem] font-medium text-destructive my-1\">\n              {form.formState.errors.root.message}\n            </p>\n          )}\n          <form\n            onSubmit={form.handleSubmit((data) => onSubmit(data, form))}\n            {...formProps}\n          >\n            {fields.map((field, index) => (\n              <ZField\n                key={`field-${index}-${field.key}`}\n                field={field}\n                path={[field.key]}\n              />\n            ))}\n\n            {children}\n\n            {withReset && (\n              <Button\n                type=\"button\"\n                {...resetProps}\n                onClick={() =>\n                  form.reset(defaultValues || getDefaultValues(schema))\n                }\n              >\n                Reset\n              </Button>\n            )}\n            {withSubmit && (\n              <Button type=\"submit\" {...submitProps}>\n                {submitProps.children || \"Submit\"}\n              </Button>\n            )}\n          </form>\n          {footer}\n        </div>\n      </ZFormProvider>\n    </Form>\n  );\n}\n",
      "type": "registry:block",
      "target": "~/zform/form.tsx"
    },
    {
      "path": "./zform/index.ts",
      "content": "import { ZForm } from \"./form\";\n\nexport * from \"./types\";\nexport * from \"./custom\";\nexport default ZForm;\n",
      "type": "registry:block",
      "target": "~/zform/index.ts"
    },
    {
      "path": "./zform/types.ts",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { ComponentType, ReactNode } from \"react\";\nimport { DefaultValues, UseFormReturn } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { FieldType, ParsedField, ZodObjectOrWrapped } from \"./core/types\";\nimport { SelectProps } from \"@radix-ui/react-select\";\nimport { CheckboxProps } from \"@radix-ui/react-checkbox\";\nimport { SwitchProps } from \"@radix-ui/react-switch\";\nimport { CalendarProps } from \"./components/calendar\";\n\ninterface ZFormBaseProps<TSchema extends ZodObjectOrWrapped> {\n  schema: TSchema;\n  defaultValues?: DefaultValues<z.infer<TSchema>>;\n  onSubmit?: (\n    data: z.infer<TSchema>,\n    form: UseFormReturn<z.infer<TSchema>, unknown, undefined>\n  ) => void | Promise<void>;\n  className?: string;\n  onFormInit?: (\n    form: UseFormReturn<z.infer<TSchema>, unknown, undefined>\n  ) => void;\n}\n\ninterface ZFormComponentsProps {\n  formProps?: Omit<React.ComponentProps<\"form\">, \"onSubmit\">;\n  submitProps?: Omit<React.ComponentProps<typeof Button>, \"type\" | \"asChild\">;\n  resetProps?: Omit<React.ComponentProps<typeof Button>, \"type\" | \"asChild\">;\n  children?: ReactNode;\n  header?: ReactNode;\n  footer?: ReactNode;\n  withSubmit?: boolean;\n  withReset?: boolean;\n}\n\ntype BaseFieldConfig = {\n  labelOverride?: string;\n  descriptionOverride?: string;\n  className?: string;\n  // array item\n  itemClassName?: string;\n};\nexport type TypeOverride =\n  | \"password\"\n  | \"textarea\"\n  | \"stepper\"\n  | \"switch\"\n  | \"date-range\"\n  | \"file\"\n  | \"image-preview\"\n  | \"country-select\"\n  | \"phone-number\";\nexport type FieldConfig = BaseFieldConfig & {\n  inputProps?: React.ComponentProps<\"input\">;\n  typeOverride?: TypeOverride;\n  textareaProps?: React.ComponentProps<\"textarea\">;\n  calendarProps?: CalendarProps;\n  selectProps?: SelectProps;\n  checkboxProps?: CheckboxProps;\n  switchProps?: SwitchProps;\n  imagePreview?: ComponentType<{ src?: string }>;\n};\nexport interface ZWrapperProps {\n  type: FieldType;\n  name: string;\n  label: string;\n  description: string;\n  className?: string;\n}\n\nexport type ZFieldProps<T = FieldType> = {\n  field: ParsedField<T>;\n  path: string[];\n};\nexport type Config<T> = T extends z.ZodEffects<infer Inner>\n  ? Config<Inner>\n  : T extends z.ZodObject<infer Shape>\n  ? {\n      [K in keyof Shape]?: Config<Shape[K]> | FieldConfig;\n    }\n  : T extends z.ZodArray<infer Element>\n  ? Config<Element> | FieldConfig\n  : FieldConfig;\n\nexport interface ZFormProps<TSchema extends ZodObjectOrWrapped>\n  extends ZFormBaseProps<TSchema>,\n    ZFormComponentsProps {\n  config?: Config<TSchema> | object;\n}\n",
      "type": "registry:block",
      "target": "~/zform/types.ts"
    },
    {
      "path": "./zform/components/calendar.tsx",
      "content": "import { Button, buttonVariants } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\nimport { add, format } from \"date-fns\";\nimport { type Locale, enUS } from \"date-fns/locale\";\nimport {\n  Calendar as CalendarIcon,\n  ChevronLeft,\n  ChevronRight,\n} from \"lucide-react\";\nimport { Clock } from \"lucide-react\";\nimport * as React from \"react\";\nimport { useImperativeHandle, useRef } from \"react\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { DayPicker } from \"react-day-picker\";\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n// ---------- utils start ----------\n/**\n * regular expression to check for valid hour format (01-23)\n */\nfunction isValidHour(value: string) {\n  return /^(0[0-9]|1[0-9]|2[0-3])$/.test(value);\n}\n\n/**\n * regular expression to check for valid 12 hour format (01-12)\n */\nfunction isValid12Hour(value: string) {\n  return /^(0[1-9]|1[0-2])$/.test(value);\n}\n\n/**\n * regular expression to check for valid minute format (00-59)\n */\nfunction isValidMinuteOrSecond(value: string) {\n  return /^[0-5][0-9]$/.test(value);\n}\n\ntype GetValidNumberConfig = { max: number; min?: number; loop?: boolean };\n\nfunction getValidNumber(\n  value: string,\n  { max, min = 0, loop = false }: GetValidNumberConfig\n) {\n  let numericValue = parseInt(value, 10);\n\n  if (!Number.isNaN(numericValue)) {\n    if (!loop) {\n      if (numericValue > max) numericValue = max;\n      if (numericValue < min) numericValue = min;\n    } else {\n      if (numericValue > max) numericValue = min;\n      if (numericValue < min) numericValue = max;\n    }\n    return numericValue.toString().padStart(2, \"0\");\n  }\n\n  return \"00\";\n}\n\nfunction getValidHour(value: string) {\n  if (isValidHour(value)) return value;\n  return getValidNumber(value, { max: 23 });\n}\n\nfunction getValid12Hour(value: string) {\n  if (isValid12Hour(value)) return value;\n  return getValidNumber(value, { min: 1, max: 12 });\n}\n\nfunction getValidMinuteOrSecond(value: string) {\n  if (isValidMinuteOrSecond(value)) return value;\n  return getValidNumber(value, { max: 59 });\n}\n\ntype GetValidArrowNumberConfig = {\n  min: number;\n  max: number;\n  step: number;\n};\n\nfunction getValidArrowNumber(\n  value: string,\n  { min, max, step }: GetValidArrowNumberConfig\n) {\n  let numericValue = parseInt(value, 10);\n  if (!Number.isNaN(numericValue)) {\n    numericValue += step;\n    return getValidNumber(String(numericValue), { min, max, loop: true });\n  }\n  return \"00\";\n}\n\nfunction getValidArrowHour(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 0, max: 23, step });\n}\n\nfunction getValidArrow12Hour(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 1, max: 12, step });\n}\n\nfunction getValidArrowMinuteOrSecond(value: string, step: number) {\n  return getValidArrowNumber(value, { min: 0, max: 59, step });\n}\n\nfunction setMinutes(date: Date, value: string) {\n  const minutes = getValidMinuteOrSecond(value);\n  date.setMinutes(parseInt(minutes, 10));\n  return date;\n}\n\nfunction setSeconds(date: Date, value: string) {\n  const seconds = getValidMinuteOrSecond(value);\n  date.setSeconds(parseInt(seconds, 10));\n  return date;\n}\n\nfunction setHours(date: Date, value: string) {\n  const hours = getValidHour(value);\n  date.setHours(parseInt(hours, 10));\n  return date;\n}\n\nfunction set12Hours(date: Date, value: string, period: Period) {\n  const hours = parseInt(getValid12Hour(value), 10);\n  const convertedHours = convert12HourTo24Hour(hours, period);\n  date.setHours(convertedHours);\n  return date;\n}\n\ntype TimePickerType = \"minutes\" | \"seconds\" | \"hours\" | \"12hours\";\ntype Period = \"AM\" | \"PM\";\n\nfunction setDateByType(\n  date: Date,\n  value: string,\n  type: TimePickerType,\n  period?: Period\n) {\n  switch (type) {\n    case \"minutes\":\n      return setMinutes(date, value);\n    case \"seconds\":\n      return setSeconds(date, value);\n    case \"hours\":\n      return setHours(date, value);\n    case \"12hours\": {\n      if (!period) return date;\n      return set12Hours(date, value, period);\n    }\n    default:\n      return date;\n  }\n}\n\nfunction getDateByType(date: Date | null, type: TimePickerType) {\n  if (!date) return \"00\";\n  switch (type) {\n    case \"minutes\":\n      return getValidMinuteOrSecond(String(date.getMinutes()));\n    case \"seconds\":\n      return getValidMinuteOrSecond(String(date.getSeconds()));\n    case \"hours\":\n      return getValidHour(String(date.getHours()));\n    case \"12hours\":\n      return getValid12Hour(String(display12HourValue(date.getHours())));\n    default:\n      return \"00\";\n  }\n}\n\nfunction getArrowByType(value: string, step: number, type: TimePickerType) {\n  switch (type) {\n    case \"minutes\":\n      return getValidArrowMinuteOrSecond(value, step);\n    case \"seconds\":\n      return getValidArrowMinuteOrSecond(value, step);\n    case \"hours\":\n      return getValidArrowHour(value, step);\n    case \"12hours\":\n      return getValidArrow12Hour(value, step);\n    default:\n      return \"00\";\n  }\n}\n\n/**\n * handles value change of 12-hour input\n * 12:00 PM is 12:00\n * 12:00 AM is 00:00\n */\nfunction convert12HourTo24Hour(hour: number, period: Period) {\n  if (period === \"PM\") {\n    if (hour <= 11) {\n      return hour + 12;\n    }\n    return hour;\n  }\n\n  if (period === \"AM\") {\n    if (hour === 12) return 0;\n    return hour;\n  }\n  return hour;\n}\n\n/**\n * time is stored in the 24-hour form,\n * but needs to be displayed to the user\n * in its 12-hour representation\n */\nfunction display12HourValue(hours: number) {\n  if (hours === 0 || hours === 12) return \"12\";\n  if (hours >= 22) return `${hours - 12}`;\n  if (hours % 12 > 9) return `${hours}`;\n  return `0${hours % 12}`;\n}\n\nfunction genMonths(\n  locale: Pick<Locale, \"options\" | \"localize\" | \"formatLong\">\n) {\n  return Array.from({ length: 12 }, (_, i) => ({\n    value: i,\n    label: format(new Date(2021, i), \"MMMM\", { locale }),\n  }));\n}\n\nfunction genYears(yearRange = 50) {\n  const today = new Date();\n  return Array.from({ length: yearRange * 2 + 1 }, (_, i) => ({\n    value: today.getFullYear() - yearRange + i,\n    label: (today.getFullYear() - yearRange + i).toString(),\n  }));\n}\n\n// ---------- utils end ----------\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  yearRange = 50,\n  ...props\n}: CalendarProps & { yearRange?: number }) {\n  const MONTHS = React.useMemo(() => {\n    let locale: Pick<Locale, \"options\" | \"localize\" | \"formatLong\"> = enUS;\n    const { options, localize, formatLong } = props.locale || {};\n    if (options && localize && formatLong) {\n      locale = {\n        options,\n        localize,\n        formatLong,\n      };\n    }\n    return genMonths(locale);\n  }, []);\n\n  const YEARS = React.useMemo(() => genYears(yearRange), []);\n  const disableLeftNavigation = () => {\n    const today = new Date();\n    const startDate = new Date(today.getFullYear() - yearRange, 0, 1);\n    if (props.month) {\n      return (\n        props.month.getMonth() === startDate.getMonth() &&\n        props.month.getFullYear() === startDate.getFullYear()\n      );\n    }\n    return false;\n  };\n  const disableRightNavigation = () => {\n    const today = new Date();\n    const endDate = new Date(today.getFullYear() + yearRange, 11, 31);\n    if (props.month) {\n      return (\n        props.month.getMonth() === endDate.getMonth() &&\n        props.month.getFullYear() === endDate.getFullYear()\n      );\n    }\n    return false;\n  };\n\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months:\n          \"flex flex-col sm:flex-row space-y-4  sm:space-y-0 justify-center\",\n        month: \"flex flex-col items-center space-y-4\",\n        month_caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center \",\n        button_previous: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 absolute left-5 top-5\",\n          disableLeftNavigation() && \"pointer-events-none\"\n        ),\n        button_next: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100 absolute right-5 top-5\",\n          disableRightNavigation() && \"pointer-events-none\"\n        ),\n        month_grid: \"w-full border-collapse space-y-1\",\n        weekdays: cn(\"flex\", props.showWeekNumber && \"justify-end\"),\n        weekday:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        week: \"flex w-full mt-2\",\n        day: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20 rounded-1\",\n        day_button: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100 rounded-l-md rounded-r-md\"\n        ),\n        range_end: \"day-range-end\",\n        selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground rounded-l-md rounded-r-md\",\n        today: \"bg-accent text-accent-foreground\",\n        outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        disabled: \"text-muted-foreground opacity-50\",\n        range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        Chevron: ({ ...props }) =>\n          props.orientation === \"left\" ? (\n            <ChevronLeft className=\"h-4 w-4\" />\n          ) : (\n            <ChevronRight className=\"h-4 w-4\" />\n          ),\n        MonthCaption: ({ calendarMonth }) => {\n          return (\n            <div className=\"inline-flex gap-2\">\n              <Select\n                defaultValue={calendarMonth.date.getMonth().toString()}\n                onValueChange={(value) => {\n                  const newDate = new Date(calendarMonth.date);\n                  newDate.setMonth(Number.parseInt(value, 10));\n                  props.onMonthChange?.(newDate);\n                }}\n              >\n                <SelectTrigger className=\"w-fit gap-1 border-none p-0 focus:bg-accent focus:text-accent-foreground\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {MONTHS.map((month) => (\n                    <SelectItem\n                      key={month.value}\n                      value={month.value.toString()}\n                    >\n                      {month.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <Select\n                defaultValue={calendarMonth.date.getFullYear().toString()}\n                onValueChange={(value) => {\n                  const newDate = new Date(calendarMonth.date);\n                  newDate.setFullYear(Number.parseInt(value, 10));\n                  props.onMonthChange?.(newDate);\n                }}\n              >\n                <SelectTrigger className=\"w-fit gap-1 border-none p-0 focus:bg-accent focus:text-accent-foreground\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {YEARS.map((year) => (\n                    <SelectItem key={year.value} value={year.value.toString()}>\n                      {year.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          );\n        },\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\ninterface PeriodSelectorProps {\n  period: Period;\n  setPeriod?: (m: Period) => void;\n  date?: Date | null;\n  onDateChange?: (date: Date | undefined) => void;\n  onRightFocus?: () => void;\n  onLeftFocus?: () => void;\n}\n\nconst TimePeriodSelect = React.forwardRef<\n  HTMLButtonElement,\n  PeriodSelectorProps\n>(\n  (\n    { period, setPeriod, date, onDateChange, onLeftFocus, onRightFocus },\n    ref\n  ) => {\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n      if (e.key === \"ArrowRight\") onRightFocus?.();\n      if (e.key === \"ArrowLeft\") onLeftFocus?.();\n    };\n\n    const handleValueChange = (value: Period) => {\n      setPeriod?.(value);\n\n      /**\n       * trigger an update whenever the user switches between AM and PM;\n       * otherwise user must manually change the hour each time\n       */\n      if (date) {\n        const tempDate = new Date(date);\n        const hours = display12HourValue(date.getHours());\n        onDateChange?.(\n          setDateByType(\n            tempDate,\n            hours.toString(),\n            \"12hours\",\n            period === \"AM\" ? \"PM\" : \"AM\"\n          )\n        );\n      }\n    };\n\n    return (\n      <div className=\"flex h-10 items-center\">\n        <Select\n          defaultValue={period}\n          onValueChange={(value: Period) => handleValueChange(value)}\n        >\n          <SelectTrigger\n            ref={ref}\n            className=\"w-[65px] focus:bg-accent focus:text-accent-foreground\"\n            onKeyDown={handleKeyDown}\n          >\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"AM\">AM</SelectItem>\n            <SelectItem value=\"PM\">PM</SelectItem>\n          </SelectContent>\n        </Select>\n      </div>\n    );\n  }\n);\n\nTimePeriodSelect.displayName = \"TimePeriodSelect\";\n\ninterface TimePickerInputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {\n  picker: TimePickerType;\n  date?: Date | null;\n  onDateChange?: (date: Date | undefined) => void;\n  period?: Period;\n  onRightFocus?: () => void;\n  onLeftFocus?: () => void;\n}\n\nconst TimePickerInput = React.forwardRef<\n  HTMLInputElement,\n  TimePickerInputProps\n>(\n  (\n    {\n      className,\n      type = \"tel\",\n      value,\n      id,\n      name,\n      date = new Date(new Date().setHours(0, 0, 0, 0)),\n      onDateChange,\n      onChange,\n      onKeyDown,\n      picker,\n      period,\n      onLeftFocus,\n      onRightFocus,\n      ...props\n    },\n    ref\n  ) => {\n    const [flag, setFlag] = React.useState<boolean>(false);\n    const [prevIntKey, setPrevIntKey] = React.useState<string>(\"0\");\n\n    /**\n     * allow the user to enter the second digit within 2 seconds\n     * otherwise start again with entering first digit\n     */\n    React.useEffect(() => {\n      if (flag) {\n        const timer = setTimeout(() => {\n          setFlag(false);\n        }, 2000);\n\n        return () => clearTimeout(timer);\n      }\n    }, [flag]);\n\n    const calculatedValue = React.useMemo(() => {\n      return getDateByType(date, picker);\n    }, [date, picker]);\n\n    const calculateNewValue = (key: string) => {\n      /*\n       * If picker is '12hours' and the first digit is 0, then the second digit is automatically set to 1.\n       * The second entered digit will break the condition and the value will be set to 10-12.\n       */\n      if (picker === \"12hours\") {\n        if (flag && calculatedValue.slice(1, 2) === \"1\" && prevIntKey === \"0\")\n          return `0${key}`;\n      }\n\n      return !flag ? `0${key}` : calculatedValue.slice(1, 2) + key;\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Tab\") return;\n      e.preventDefault();\n      if (e.key === \"ArrowRight\") onRightFocus?.();\n      if (e.key === \"ArrowLeft\") onLeftFocus?.();\n      if ([\"ArrowUp\", \"ArrowDown\"].includes(e.key)) {\n        const step = e.key === \"ArrowUp\" ? 1 : -1;\n        const newValue = getArrowByType(calculatedValue, step, picker);\n        if (flag) setFlag(false);\n        const tempDate = date ? new Date(date) : new Date();\n        onDateChange?.(setDateByType(tempDate, newValue, picker, period));\n      }\n      if (e.key >= \"0\" && e.key <= \"9\") {\n        if (picker === \"12hours\") setPrevIntKey(e.key);\n\n        const newValue = calculateNewValue(e.key);\n        if (flag) onRightFocus?.();\n        setFlag((prev) => !prev);\n        const tempDate = date ? new Date(date) : new Date();\n        onDateChange?.(setDateByType(tempDate, newValue, picker, period));\n      }\n    };\n\n    return (\n      <Input\n        ref={ref}\n        id={id || picker}\n        name={name || picker}\n        className={cn(\n          \"w-[48px] text-center font-mono text-base tabular-nums caret-transparent focus:bg-accent focus:text-accent-foreground [&::-webkit-inner-spin-button]:appearance-none\",\n          className\n        )}\n        value={value || calculatedValue}\n        onChange={(e) => {\n          e.preventDefault();\n          onChange?.(e);\n        }}\n        type={type}\n        inputMode=\"decimal\"\n        onKeyDown={(e) => {\n          onKeyDown?.(e);\n          handleKeyDown(e);\n        }}\n        {...props}\n      />\n    );\n  }\n);\n\nTimePickerInput.displayName = \"TimePickerInput\";\n\ninterface TimePickerProps {\n  date?: Date | null;\n  onChange?: (date: Date | undefined) => void;\n  hourCycle?: 12 | 24;\n  /**\n   * Determines the smallest unit that is displayed in the datetime picker.\n   * Default is 'second'.\n   * */\n  granularity?: Granularity;\n}\n\ninterface TimePickerRef {\n  minuteRef: HTMLInputElement | null;\n  hourRef: HTMLInputElement | null;\n  secondRef: HTMLInputElement | null;\n}\n\nconst TimePicker = React.forwardRef<TimePickerRef, TimePickerProps>(\n  ({ date, onChange, hourCycle = 24, granularity = \"second\" }, ref) => {\n    const minuteRef = React.useRef<HTMLInputElement>(null);\n    const hourRef = React.useRef<HTMLInputElement>(null);\n    const secondRef = React.useRef<HTMLInputElement>(null);\n    const periodRef = React.useRef<HTMLButtonElement>(null);\n    const [period, setPeriod] = React.useState<Period>(\n      date && date.getHours() >= 12 ? \"PM\" : \"AM\"\n    );\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        minuteRef: minuteRef.current,\n        hourRef: hourRef.current,\n        secondRef: secondRef.current,\n        periodRef: periodRef.current,\n      }),\n      [minuteRef, hourRef, secondRef]\n    );\n    return (\n      <div className=\"flex items-center justify-center gap-2\">\n        <label htmlFor=\"datetime-picker-hour-input\" className=\"cursor-pointer\">\n          <Clock className=\"mr-2 h-4 w-4\" />\n        </label>\n        <TimePickerInput\n          picker={hourCycle === 24 ? \"hours\" : \"12hours\"}\n          date={date}\n          id=\"datetime-picker-hour-input\"\n          onDateChange={onChange}\n          ref={hourRef}\n          period={period}\n          onRightFocus={() => minuteRef?.current?.focus()}\n        />\n        {(granularity === \"minute\" || granularity === \"second\") && (\n          <>\n            :\n            <TimePickerInput\n              picker=\"minutes\"\n              date={date}\n              onDateChange={onChange}\n              ref={minuteRef}\n              onLeftFocus={() => hourRef?.current?.focus()}\n              onRightFocus={() => secondRef?.current?.focus()}\n            />\n          </>\n        )}\n        {granularity === \"second\" && (\n          <>\n            :\n            <TimePickerInput\n              picker=\"seconds\"\n              date={date}\n              onDateChange={onChange}\n              ref={secondRef}\n              onLeftFocus={() => minuteRef?.current?.focus()}\n              onRightFocus={() => periodRef?.current?.focus()}\n            />\n          </>\n        )}\n        {hourCycle === 12 && (\n          <div className=\"grid gap-1 text-center\">\n            <TimePeriodSelect\n              period={period}\n              setPeriod={setPeriod}\n              date={date}\n              onDateChange={(date) => {\n                onChange?.(date);\n                if (date && date?.getHours() >= 12) {\n                  setPeriod(\"PM\");\n                } else {\n                  setPeriod(\"AM\");\n                }\n              }}\n              ref={periodRef}\n              onLeftFocus={() => secondRef?.current?.focus()}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n);\nTimePicker.displayName = \"TimePicker\";\n\ntype Granularity = \"day\" | \"hour\" | \"minute\" | \"second\";\n\ntype DateTimePickerProps = {\n  value?: Date;\n  onChange?: (date: Date | undefined) => void;\n  disabled?: boolean;\n  /** showing `AM/PM` or not. */\n  hourCycle?: 12 | 24;\n  placeholder?: string;\n  /**\n   * The year range will be: `This year + yearRange` and `this year - yearRange`.\n   * Default is 50.\n   * For example:\n   * This year is 2024, The year dropdown will be 1974 to 2024 which is generated by `2024 - 50 = 1974` and `2024 + 50 = 2074`.\n   * */\n  yearRange?: number;\n  /**\n   * The format is derived from the `date-fns` documentation.\n   * @reference https://date-fns.org/v3.6.0/docs/format\n   **/\n  displayFormat?: { hour24?: string; hour12?: string };\n  /**\n   * The granularity prop allows you to control the smallest unit that is displayed by DateTimePicker.\n   * By default, the value is `second` which shows all time inputs.\n   **/\n  granularity?: Granularity;\n  className?: string;\n  /**\n   * Show the default month and time when popup the calendar. Default is the current Date().\n   **/\n  defaultPopupValue?: Date;\n} & Pick<\n  CalendarProps,\n  \"locale\" | \"weekStartsOn\" | \"showWeekNumber\" | \"showOutsideDays\"\n>;\n\ntype DateTimePickerRef = {\n  value?: Date;\n} & Omit<HTMLButtonElement, \"value\">;\n\nconst DateTimePicker = React.forwardRef<\n  Partial<DateTimePickerRef>,\n  DateTimePickerProps\n>(\n  (\n    {\n      locale = enUS,\n      defaultPopupValue = new Date(new Date().setHours(0, 0, 0, 0)),\n      value,\n      onChange,\n      hourCycle = 24,\n      yearRange = 50,\n      disabled = false,\n      displayFormat,\n      granularity = \"second\",\n      placeholder = \"Pick a date\",\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const [month, setMonth] = React.useState<Date>(value ?? defaultPopupValue);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const [displayDate, setDisplayDate] = React.useState<Date | undefined>(\n      value ?? undefined\n    );\n    /**\n     * carry over the current time when a user clicks a new day\n     * instead of resetting to 00:00\n     */\n    const handleSelect = (newDay: Date | undefined) => {\n      if (!newDay) {\n        return;\n      }\n      if (!defaultPopupValue) {\n        newDay.setHours(\n          month?.getHours() ?? 0,\n          month?.getMinutes() ?? 0,\n          month?.getSeconds() ?? 0\n        );\n        onChange?.(newDay);\n        setMonth(newDay);\n        return;\n      }\n      const diff = newDay.getTime() - defaultPopupValue.getTime();\n      const diffInDays = diff / (1000 * 60 * 60 * 24);\n      const newDateFull = add(defaultPopupValue, {\n        days: Math.ceil(diffInDays),\n      });\n      newDateFull.setHours(\n        month?.getHours() ?? 0,\n        month?.getMinutes() ?? 0,\n        month?.getSeconds() ?? 0\n      );\n      onChange?.(newDateFull);\n      setMonth(newDateFull);\n    };\n\n    const onSelect = (newDay?: Date) => {\n      if (!newDay) {\n        return;\n      }\n      onChange?.(newDay);\n      setMonth(newDay);\n      setDisplayDate(newDay);\n    };\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        ...buttonRef.current,\n        value: displayDate,\n      }),\n      [displayDate]\n    );\n\n    const initHourFormat = {\n      hour24:\n        displayFormat?.hour24 ??\n        `PPP HH:mm${!granularity || granularity === \"second\" ? \":ss\" : \"\"}`,\n      hour12:\n        displayFormat?.hour12 ??\n        `PP hh:mm${!granularity || granularity === \"second\" ? \":ss\" : \"\"} b`,\n    };\n\n    let loc = enUS;\n    const { options, localize, formatLong } = locale;\n    if (options && localize && formatLong) {\n      loc = {\n        ...enUS,\n        options,\n        localize,\n        formatLong,\n      };\n    }\n\n    return (\n      <Popover>\n        <PopoverTrigger asChild disabled={disabled}>\n          <Button\n            variant=\"outline\"\n            className={cn(\n              \"w-full justify-start text-left font-normal\",\n              !displayDate && \"text-muted-foreground\",\n              className\n            )}\n            ref={buttonRef}\n          >\n            <CalendarIcon className=\"mr-2 h-4 w-4\" />\n            {displayDate ? (\n              format(\n                displayDate,\n                hourCycle === 24\n                  ? initHourFormat.hour24\n                  : initHourFormat.hour12,\n                {\n                  locale: loc,\n                }\n              )\n            ) : (\n              <span>{placeholder}</span>\n            )}\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-auto p-0\">\n          <Calendar\n            mode=\"single\"\n            selected={displayDate}\n            month={month}\n            onSelect={(newDate) => {\n              if (newDate) {\n                newDate.setHours(\n                  month?.getHours() ?? 0,\n                  month?.getMinutes() ?? 0,\n                  month?.getSeconds() ?? 0\n                );\n                onSelect(newDate);\n              }\n            }}\n            onMonthChange={handleSelect}\n            yearRange={yearRange}\n            locale={locale}\n            {...props}\n          />\n          {granularity !== \"day\" && (\n            <div className=\"border-t border-border p-3\">\n              <TimePicker\n                onChange={(value) => {\n                  onChange?.(value);\n                  setDisplayDate(value);\n                  if (value) {\n                    setMonth(value);\n                  }\n                }}\n                date={month}\n                hourCycle={hourCycle}\n                granularity={granularity}\n              />\n            </div>\n          )}\n        </PopoverContent>\n      </Popover>\n    );\n  }\n);\n\nDateTimePicker.displayName = \"DateTimePicker\";\n\nexport { DateTimePicker, TimePickerInput, TimePicker, Calendar };\nexport type { TimePickerType, DateTimePickerProps, DateTimePickerRef };\n",
      "type": "registry:block",
      "target": "~/zform/components/calendar.tsx"
    },
    {
      "path": "./zform/core/parser.ts",
      "content": "import { DefaultValues } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport {\n  ParsedField,\n  inferFieldType,\n  ZodObjectOrWrapped,\n  ParsedSchema,\n} from \"./types\";\n\nfunction beautifyLabel(label: string) {\n  if (!label) {\n    return \"\";\n  }\n  let output = label.replace(/_|-/g, \" \"); // Replace all underscores with spaces (snake_case)\n  output = output.replace(/([A-Z])/g, \" $1\"); // Add spaces before capital letters (camelCase)\n  output = output.replace(/\\b\\w/g, (char) => char.toUpperCase()); // Capitalize the first letter of each word;;\n\n  // Never return a number for the label\n  // This primarily important for array fields so we don't get \"0\" as a label\n  if (!isNaN(Number(output))) {\n    return \"\";\n  }\n\n  // Ignore labels for arrays of non-objects\n  if (output === \"*\") {\n    return \"\";\n  }\n\n  return output;\n}\nfunction getDefaultValueInZodStack(schema: z.ZodTypeAny): unknown {\n  if (schema instanceof z.ZodDefault) {\n    return schema._def.defaultValue();\n  }\n\n  if (schema instanceof z.ZodEffects) {\n    return getDefaultValueInZodStack(schema.innerType());\n  }\n\n  return undefined;\n}\n\nfunction parseField(key: string, schema: z.ZodTypeAny): ParsedField {\n  const baseSchema = getBaseSchema(schema);\n  const type = inferFieldType(baseSchema);\n  const defaultValue = getDefaultValueInZodStack(schema);\n  let options: [string, string][] = [];\n\n  // Arrays and objects\n  let subSchema: ParsedField[] = [];\n  if (baseSchema instanceof z.ZodObject) {\n    subSchema = Object.entries(baseSchema.shape).map(([key, field]) =>\n      parseField(key, field as z.ZodTypeAny)\n    );\n  }\n  if (baseSchema instanceof z.ZodArray) {\n    subSchema = [parseField(\"0\", baseSchema._def.type)];\n  }\n  if (baseSchema instanceof z.ZodNativeEnum) {\n    options = Object.values<string>(baseSchema._def.values).map((v) => [\n      v,\n      beautifyLabel(v),\n    ]);\n  }\n  if (baseSchema instanceof z.ZodEnum) {\n    options = (baseSchema._def.values as string[]).map((v) => [\n      v,\n      beautifyLabel(v),\n    ]);\n  }\n  return {\n    key,\n    type,\n    required: !schema.isOptional(),\n    default: defaultValue,\n    description: baseSchema.description,\n    schema: subSchema,\n    options,\n  };\n}\n\nfunction getBaseSchema<\n  ChildType extends z.ZodAny | z.ZodTypeAny | z.AnyZodObject = z.ZodAny\n>(schema: ChildType | z.ZodEffects<ChildType>): ChildType {\n  if (\"innerType\" in schema._def) {\n    return getBaseSchema(schema._def.innerType as ChildType);\n  }\n  if (\"schema\" in schema._def) {\n    return getBaseSchema(schema._def.schema as ChildType);\n  }\n\n  return schema as ChildType;\n}\nexport function getDefaultValues(\n  schema: ZodObjectOrWrapped\n): DefaultValues<ZodObjectOrWrapped> {\n  const objectSchema =\n    schema instanceof z.ZodEffects ? schema.innerType() : schema;\n  const shape = objectSchema.shape;\n\n  const defaultValues: Record<string, unknown> = {};\n\n  for (const [key, field] of Object.entries(shape)) {\n    const defaultValue = getDefaultValueInZodStack(field as z.ZodTypeAny);\n    if (defaultValue !== undefined) {\n      defaultValues[key] = defaultValue;\n    }\n  }\n\n  return defaultValues;\n}\n\nexport function getLabel(field: ParsedField) {\n  return beautifyLabel(field.key);\n}\n\nexport function getDescriptions(field: ParsedField) {\n  return field.description;\n}\n\nfunction enhanceZodString(key: string | number, field: z.ZodString) {\n  const isOptional = field.isOptional();\n  if (!isOptional) {\n    // If the field is a string, apply the refinement with the required error for falsy string values\n    const message = field._def.errorMap?.(\n      {\n        code: \"invalid_type\",\n        expected: \"string\",\n        received: \"undefined\",\n        path: [key],\n      },\n      { data: undefined, defaultError: \"This field is required\" }\n    ).message;\n    return field.refine((val) => !!val, {\n      message,\n    });\n  }\n  return field;\n}\nfunction enhanceZodObject(\n  key: string | number,\n  field: z.ZodObject<\n    z.ZodRawShape,\n    z.UnknownKeysParam,\n    z.ZodTypeAny,\n    z.ZodTypeAny,\n    z.ZodTypeAny\n  >\n) {\n  const isOptional = field.isOptional();\n  const enhanced = z.object(createEnhancedSchemaShape(field));\n  if (isOptional) {\n    const message = field._def.errorMap?.(\n      {\n        code: \"invalid_type\",\n        expected: \"string\",\n        received: \"undefined\",\n        path: [key],\n      },\n      { data: undefined, defaultError: \"This field is required\" }\n    ).message;\n    return enhanced.refine((val) => !!val, message);\n  }\n\n  return enhanced;\n}\n\nfunction enhanceZodArray(\n  key: string | number,\n  field: z.ZodArray<z.ZodTypeAny>\n) {\n  const enhancedElement = enhanceZodField(key, field.element);\n  let copy = z.array(enhancedElement);\n  // Mapping between _def keys and ZodArray methods\n  const checksMap = {\n    exactLength: \"length\",\n    minLength: \"min\",\n    maxLength: \"max\",\n  } as const;\n\n  // Dynamically apply the checks\n  for (const [checkKey, method] of Object.entries(checksMap)) {\n    if (field._def[checkKey as \"exactLength\" | \"maxLength\" | \"minLength\"]) {\n      const check =\n        field._def[checkKey as \"exactLength\" | \"maxLength\" | \"minLength\"]!;\n      copy = copy[method](check.value, check.message);\n    }\n  }\n  return copy;\n}\n\nfunction enhanceZodField(\n  key: string | number,\n  field: z.ZodTypeAny\n): z.ZodTypeAny {\n  if (field instanceof z.ZodString) {\n    return enhanceZodString(key, field);\n  } else if (field instanceof z.ZodObject) {\n    return enhanceZodObject(key, field);\n  } else if (field instanceof z.ZodArray) {\n    return enhanceZodArray(key, field);\n  }\n  return field; // Leave other types untouched\n}\n\nfunction createEnhancedSchemaShape(\n  schema: ZodObjectOrWrapped\n): Record<string, z.ZodTypeAny> {\n  const objectSchema =\n    schema instanceof z.ZodEffects ? schema.innerType() : schema;\n  const shape = objectSchema.shape;\n  const enhancedShape: Record<string, z.ZodTypeAny> = {};\n\n  Object.keys(shape).forEach((key) => {\n    const field = shape[key];\n    enhancedShape[key] = enhanceZodField(key, field);\n  });\n  return enhancedShape;\n}\nexport function parseSchema(schema: ZodObjectOrWrapped): ParsedSchema {\n  const shape = createEnhancedSchemaShape(schema);\n\n  const fields: ParsedField[] = Object.entries(shape).map(([key, field]) =>\n    parseField(key, field as z.ZodTypeAny)\n  );\n\n  return { fields, schema: z.object(shape) };\n}\n",
      "type": "registry:block",
      "target": "~/zform/core/parser.ts"
    },
    {
      "path": "./zform/core/types.ts",
      "content": "import { ZodRawShape, ZodTypeAny, z, UnknownKeysParam } from \"zod\";\n\nexport type ZodObjectOrWrapped<\n  T extends ZodRawShape = Record<string, ZodTypeAny>\n> =\n  | z.ZodObject<T, UnknownKeysParam>\n  | z.ZodEffects<z.ZodObject<T, UnknownKeysParam>>;\n\nexport type FieldType = ReturnType<typeof inferFieldType>;\nexport interface ParsedField<T = FieldType> {\n  key: string;\n  type: T;\n  required: boolean;\n  default?: unknown;\n  description?: string;\n\n  // Field-specific\n  options?: [string, string][]; // [value, label] for enums\n  schema?: ParsedField[]; // For objects and arrays\n}\n\nexport interface ParsedSchema {\n  fields: ParsedField[];\n  schema: ZodObjectOrWrapped;\n}\n\nexport function inferFieldType(schema: z.ZodTypeAny) {\n  if (schema instanceof z.ZodObject) return \"object\";\n  if (schema instanceof z.ZodString) return \"string\";\n  if (schema instanceof z.ZodNumber) return \"number\";\n  if (schema instanceof z.ZodBoolean) return \"boolean\";\n  if (schema instanceof z.ZodDate) return \"date\";\n  if (schema instanceof z.ZodEnum) return \"select\";\n  if (schema instanceof z.ZodNativeEnum) return \"select\";\n  if (schema instanceof z.ZodArray) return \"array\";\n  return \"custom\"; // Default to custom for unknown types\n}\n",
      "type": "registry:block",
      "target": "~/zform/core/types.ts"
    },
    {
      "path": "./zform/custom/country-select.ts",
      "content": "import { z } from \"zod\";\nexport interface Country {\n  countryCode: string;\n  countryName: string;\n  countryCallingCode: string;\n  flag: string;\n  emoji: string;\n}\nconst countryObject = z.object({\n  countryCode: z.string(),\n  countryName: z.string(),\n  countryCallingCode: z.string(),\n  flag: z.string().url(),\n});\n\nexport const countrySelect = (config?: { required_error?: string }) =>\n  z.custom<Country>(\n    (value) => countryObject.safeParse(value).success,\n    config?.required_error || \"Invalid country object\"\n  );\n",
      "type": "registry:block",
      "target": "~/zform/custom/country-select.ts"
    },
    {
      "path": "./zform/custom/date-range.ts",
      "content": "import { z } from \"zod\";\n\nexport type DateRange = {\n  from: Date;\n  to: Date | undefined;\n};\nconst rangeObject = z.object({\n  from: z.date(),\n  to: z.date().optional(),\n});\nexport const dateRange = (config?: { required_error?: string }) =>\n  z\n    .custom<DateRange>(\n      (value) => rangeObject.safeParse(value).success,\n      config?.required_error || \"Invalid range object\"\n    )\n    .refine(({ from, to }) => {\n      if (to && to.getTime() <= from.getTime()) return false;\n      return true;\n    }, \"The end date must be later than the start date.\");\n",
      "type": "registry:block",
      "target": "~/zform/custom/date-range.ts"
    },
    {
      "path": "./zform/custom/index.ts",
      "content": "import { dateRange } from \"./date-range\";\nimport { countrySelect } from \"./country-select\";\nimport { phoneNumber } from \"./phone-number\";\nexport const zf = {\n  dateRange,\n  countrySelect,\n  phoneNumber,\n};\n",
      "type": "registry:block",
      "target": "~/zform/custom/index.ts"
    },
    {
      "path": "./zform/custom/phone-number.ts",
      "content": "import { isValidPhoneNumber } from \"libphonenumber-js\";\nimport { z } from \"zod\";\nexport interface PhoneNumber {\n  formatted: string;\n  value: string;\n  phoneCode: string;\n}\nconst phoneObject = z.object({\n  formatted: z.string(),\n  value: z.string(),\n  phoneCode: z.string(),\n});\n\nexport const phoneNumber = (config?: { required_error?: string }) =>\n  z\n    .custom<PhoneNumber>(\n      (value) => phoneObject.safeParse(value).success,\n      config?.required_error || \"Invalid phone object\"\n    )\n    .refine((val) => {\n      return isValidPhoneNumber(val.formatted);\n    }, \"Invalid phone number\");\n",
      "type": "registry:block",
      "target": "~/zform/custom/phone-number.ts"
    },
    {
      "path": "./zform/hooks/use-countries.ts",
      "content": "import wordCountries from \"world-countries\";\n\nexport const useCountries = () => {\n  const countries = wordCountries\n    .sort((a, b) => a.cca3.localeCompare(b.cca3))\n    .map(({ cca2, flag, name }) => ({\n      countryCode: cca2,\n      countryName: name.common,\n      flag: `https://flagcdn.com/w40/${cca2.toLowerCase()}.png`,\n      emoji: flag,\n    }));\n  function getCountryFlagUrl(code: string) {\n    return `https://flagcdn.com/w40/${code.toLowerCase()}.png`;\n  }\n  function getCountryFlagEmoji(code: string) {\n    return wordCountries.find((wc) => wc.cca2 === code)?.flag;\n  }\n  function getCountry(code: string) {\n    return countries.find((c) => c.countryCode === code);\n  }\n  function getCountryName(code: string) {\n    return countries.find((c) => c.countryCode === code)?.countryName;\n  }\n  return {\n    countries,\n    getCountryFlagEmoji,\n    getCountryFlagUrl,\n    getCountry,\n    getCountryName,\n  };\n};\n",
      "type": "registry:block",
      "target": "~/zform/hooks/use-countries.ts"
    },
    {
      "path": "./zform/hooks/use-phone.ts",
      "content": "import { CountryCode, AsYouType } from \"libphonenumber-js\";\nimport metadata from \"libphonenumber-js/metadata.min.json\";\n\nexport function usePhone() {\n  const countries = Object.entries(metadata.countries).map(([k, value]) => ({\n    countryCode: k as CountryCode,\n    phoneCode: value[0] as string,\n    iddPrefix: value[1] as string,\n    nationalPattern: value[2] as string,\n    possibleLengths: value[3] as string[],\n    flag: `https://flagcdn.com/w40/${k.toLowerCase()}.png`,\n  }));\n\n  const typing = new AsYouType();\n\n  return { countries, typing };\n}\n",
      "type": "registry:block",
      "target": "~/zform/hooks/use-phone.ts"
    },
    {
      "path": "./zform/components/fields/array-field.tsx",
      "content": "import React from \"react\";\nimport { useFieldArray, useFormContext } from \"react-hook-form\";\n\nimport { ParsedField } from \"../../core/types\";\nimport { ZField } from \"../../field\";\nimport { Button } from \"@/components/ui/button\";\nimport { PlusIcon, TrashIcon } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { useZField } from \"../../context\";\n\nexport const ArrayField: React.FC<{\n  field: ParsedField;\n  path: string[];\n}> = ({ field, path }) => {\n  const { className, fieldLabel, fieldDescription, name, itemClassName } =\n    useZField(field, path);\n  const { control, getFieldState } = useFormContext();\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name,\n  });\n\n  const defaultValue = field.schema?.[0].default;\n  const { error } = getFieldState(name);\n  const errorMessage = error?.message || error?.root?.message;\n\n  return (\n    <fieldset className={className}>\n      <legend className=\"p-2 flex justify-between gap-2\">\n        <div>\n          <p className=\"font-semibold \">{fieldLabel} </p>\n          <p className=\"text-sm text-muted-foreground\">{fieldDescription}</p>\n          {errorMessage && (\n            <p className=\"text-sm font-medium text-destructive\">\n              {errorMessage}\n            </p>\n          )}\n        </div>\n\n        <Button\n          onClick={() => append(defaultValue)}\n          variant=\"outline\"\n          size=\"sm\"\n          type=\"button\"\n          className=\"\"\n        >\n          <PlusIcon className=\"size-4\" />\n          Add\n        </Button>\n      </legend>\n\n      {fields.map(({ id }, index) => (\n        <div key={id} className={cn(\"relative p-2\", itemClassName)}>\n          <Button\n            onClick={() => remove(index)}\n            variant=\"ghost\"\n            size=\"icon\"\n            type=\"button\"\n            className=\"absolute -top-2 -right-2\"\n          >\n            <TrashIcon className=\"size-4 text-destructive\" />\n          </Button>\n          <ZField\n            field={field.schema![0]!}\n            path={[...path, index.toString()]}\n          />\n        </div>\n      ))}\n    </fieldset>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/array-field.tsx"
    },
    {
      "path": "./zform/components/fields/boolean-field.tsx",
      "content": "import React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { ParsedField } from \"../../core/types\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { ZFieldProps } from \"../../types\";\nimport { useZField } from \"../../context\";\n\nfunction useBooleanField(field: ParsedField) {\n  const { setValue, getValues } = useFormContext();\n\n  const { id, name } = useFormField();\n  const { key, required } = field;\n  const checked = getValues(name);\n\n  function onCheckedChange(checked: boolean) {\n    setValue(name, checked, { shouldValidate: true });\n  }\n  return { required, id, key, onCheckedChange, checked };\n}\n\nexport const CheckboxField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, ...props } = useBooleanField(field);\n  const { checkboxProps } = useZField(field, path);\n  return <Checkbox key={key} {...props} {...checkboxProps} />;\n};\n\nexport const SwitchField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, ...props } = useBooleanField(field);\n\n  const { switchProps } = useZField(field, path);\n  return <Switch key={key} {...props} {...switchProps} />;\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/boolean-field.tsx"
    },
    {
      "path": "./zform/components/fields/country-field.tsx",
      "content": "import React, { useRef } from \"react\";\nimport { CheckIcon, Globe } from \"lucide-react\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { ZFieldProps } from \"../../types\";\nimport { useCountries } from \"../../hooks/use-countries\";\n\nexport const CountryField: React.FC<ZFieldProps> = () => {\n  const { setValue, getValues } = useFormContext();\n  const popoverTriggerRef = useRef<HTMLButtonElement>(null); // Ref for the PopoverTrigger\n  const { name } = useFormField();\n  const { countries, getCountry } = useCountries();\n  const value = getValues(name);\n  const handleChange = (code: string) => {\n    setValue(name, getCountry(code), { shouldValidate: true });\n    popoverTriggerRef.current?.click(); // Programmatically close the popover\n  };\n  return (\n    <Popover>\n      <PopoverTrigger asChild ref={popoverTriggerRef}>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full font-normal\",\n            !value && \"text-muted-foreground\"\n          )}\n          type=\"button\"\n        >\n          {value ? (\n            <span\n              className=\"mr-2 h-4 w-6 bg-cover bg-center bg-no-repeat\"\n              style={{ backgroundImage: `url(${value.flag})` }}\n            />\n          ) : (\n            <Globe className=\"mr-2 size-4 opacity-50\" />\n          )}\n          {value ? (\n            <span className=\"mr-auto\">{value.countryName}</span>\n          ) : (\n            <span className=\"mr-auto\">Select a country</span>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search country...\" />\n          <CommandList>\n            <ScrollArea className=\"h-72\">\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {countries.map(({ countryName, emoji, countryCode }) => (\n                  <CommandItem\n                    key={`country-${countryCode}`}\n                    className={cn(\n                      \"gap-2\",\n                      value?.countryCode === countryCode && \"bg-muted\"\n                    )}\n                    value={countryCode}\n                    onSelect={handleChange}\n                  >\n                    <span className=\"flex h-4 w-6 justify-center overflow-hidden\">\n                      {emoji}\n                    </span>\n                    <span className=\"flex-1 text-sm\">{countryName}</span>\n                    <CheckIcon\n                      className={`ml-auto size-4 ${\n                        value?.countryCode === countryCode\n                          ? \"opacity-100\"\n                          : \"opacity-0\"\n                      }`}\n                    />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/country-field.tsx"
    },
    {
      "path": "./zform/components/fields/custom-field.tsx",
      "content": "import { useFormField } from \"@/components/ui/form\";\nimport { useFormContext } from \"react-hook-form\";\nimport { useZField } from \"../../context\";\nimport { ParsedField } from \"../../core/types\";\nimport { ZFieldProps } from \"../../types\";\nimport { Input } from \"@/components/ui/input\";\n\nfunction useCustomField(field: ParsedField) {\n  const { register } = useFormContext();\n  const { id, name } = useFormField();\n  const { key, required } = field;\n  return { key, required, id, ...register(name) };\n}\n\nexport const CustomField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, ...other } = useCustomField(field);\n  const { inputProps } = useZField(field, path);\n  return <Input key={key} {...other} {...inputProps} />;\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/custom-field.tsx"
    },
    {
      "path": "./zform/components/fields/date-field.tsx",
      "content": "import React, { useEffect, useRef } from \"react\";\nimport { CalendarIcon } from \"lucide-react\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { ParsedField } from \"../../core/types\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { ZFieldProps } from \"../../types\";\nimport { useZField } from \"../../context\";\nimport { format } from \"date-fns\";\nimport { DateRange } from \"react-day-picker\";\nimport { Calendar } from \"../calendar\";\n\nfunction formatDate(date: Date) {\n  return format(date, \"LLL dd, y\");\n}\n\nfunction useDateField(field: ParsedField) {\n  const { setValue, getValues } = useFormContext();\n  const { id, name } = useFormField();\n  const { key } = field;\n  const selected = getValues(name);\n  const onSelect = (date: Date | DateRange | undefined) => {\n    setValue(name, date, { shouldValidate: true });\n  };\n\n  return { key, id, onSelect, selected };\n}\nexport const DateField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const popoverTriggerRef = useRef<HTMLButtonElement>(null); // Ref for the PopoverTrigger\n\n  const { calendarProps } = useZField(field, path);\n  const { id, key, onSelect, selected } = useDateField(field);\n\n  useEffect(() => {\n    if (selected) popoverTriggerRef.current?.click();\n  }, [selected]);\n\n  return (\n    <Popover key={key}>\n      <PopoverTrigger asChild ref={popoverTriggerRef}>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full font-normal\",\n            !selected && \"text-muted-foreground\"\n          )}\n          type=\"button\"\n        >\n          <CalendarIcon />\n          {selected ? formatDate(selected) : <span>Pick a date</span>}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          id={id}\n          captionLayout=\"dropdown\"\n          {...calendarProps}\n          selected={selected}\n          mode=\"single\"\n          onSelect={onSelect}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n};\n\nexport const DateRangeField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const popoverTriggerRef = useRef<HTMLButtonElement>(null); // Ref for the PopoverTrigger\n\n  const { calendarProps } = useZField(field, path);\n  const { id, key, onSelect, selected } = useDateField(field);\n\n  useEffect(() => {\n    if (selected) popoverTriggerRef.current?.click();\n  }, [selected]);\n\n  return (\n    <Popover key={key}>\n      <PopoverTrigger asChild ref={popoverTriggerRef}>\n        <Button\n          variant={\"outline\"}\n          className={cn(\n            \"w-full font-normal\",\n            !selected && \"text-muted-foreground\"\n          )}\n          type=\"button\"\n        >\n          <CalendarIcon />\n          {selected?.from ? (\n            selected.to ? (\n              <>\n                {formatDate(selected.from)} - {formatDate(selected.to)}\n              </>\n            ) : (\n              formatDate(selected.from)\n            )\n          ) : (\n            <span>Pick a date</span>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-auto p-0\" align=\"start\">\n        <Calendar\n          id={id}\n          captionLayout=\"dropdown\"\n          {...calendarProps}\n          defaultMonth={selected?.from}\n          selected={selected}\n          numberOfMonths={2}\n          mode=\"range\"\n          onSelect={onSelect}\n        />\n      </PopoverContent>\n    </Popover>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/date-field.tsx"
    },
    {
      "path": "./zform/components/fields/file-field.tsx",
      "content": "import { useEffect, useState } from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport { useFormField } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\n\nimport { useZField } from \"../../context\";\nimport { ParsedField } from \"../../core/types\";\nimport { ZFieldProps } from \"../../types\";\n\nfunction useFileField(field: ParsedField) {\n  const { register, getValues } = useFormContext<Record<string, FileList>>();\n  const { id, name } = useFormField();\n  const { type, key, required } = field;\n  const fileList = getValues(name);\n  return { type, key, required, id, ...register(name), fileList };\n}\n\nconst ImagePreview: React.FC<{ src?: string }> = ({ src }) => {\n  return (\n    <div\n      className=\"size-64 bg-gray-200 rounded-lg border border-gray-300 bg-no-repeat bg-contain bg-center flex items-center justify-center\"\n      style={{\n        backgroundImage: src ? `url(${src})` : \"none\",\n      }}\n    >\n      {!src && (\n        <span className=\"text-center text-gray-500\">\n          Select an image to preview\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport const ImagePreviewField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, fileList, ...other } = useFileField(field);\n  const { imagePreview, inputProps } = useZField(field, path);\n  const [url, setUrl] = useState<string>();\n  useEffect(() => {\n    let objectUrl: string;\n    if (fileList && fileList[0] && fileList[0] instanceof File) {\n      objectUrl = URL.createObjectURL(fileList[0]);\n    }\n    setUrl((prev) => {\n      if (prev) URL.revokeObjectURL(prev);\n      return objectUrl;\n    });\n    return () => {\n      if (objectUrl) URL.revokeObjectURL(objectUrl);\n    };\n  }, [fileList]);\n\n  const Preview = imagePreview ? imagePreview : ImagePreview;\n  return (\n    <div className=\"flex flex-col items-center justify-center gap-4\">\n      <Preview src={url} />\n      <Input\n        key={key}\n        {...other}\n        {...inputProps}\n        accept=\"image/*\"\n        type=\"file\"\n      />\n    </div>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/file-field.tsx"
    },
    {
      "path": "./zform/components/fields/index.ts",
      "content": "import { ComponentType } from \"react\";\nimport { TypeOverride, ZFieldProps } from \"../../types\";\nimport { NumberField, StepperField } from \"./number-field\";\nimport { PasswordField, TextareaField, TextField } from \"./string-field\";\nimport { SelectField } from \"./select-field\";\nimport { FieldType } from \"../../core/types\";\nimport { DateField, DateRangeField } from \"./date-field\";\nimport { ArrayField } from \"./array-field\";\nimport { ObjectField } from \"./object-field\";\nimport { CheckboxField, SwitchField } from \"./boolean-field\";\nimport { CustomField } from \"./custom-field\";\nimport { ImagePreviewField } from \"./file-field\";\nimport { CountryField } from \"./country-field\";\nimport { PhoneField } from \"./phone-field\";\n\ntype KeyType = TypeOverride | \"default\";\n\ntype PartialRecord<K extends string, T> = {\n  [P in K]?: T;\n};\nconst TYPE_COMPONENTS_MAP: Record<\n  FieldType,\n  PartialRecord<KeyType, ComponentType<ZFieldProps>>\n> = {\n  string: {\n    default: TextField,\n    password: PasswordField,\n    textarea: TextareaField,\n  },\n  number: {\n    default: NumberField,\n    stepper: StepperField,\n  },\n  boolean: {\n    default: CheckboxField,\n    switch: SwitchField,\n  },\n  select: {\n    default: SelectField,\n  },\n  date: {\n    default: DateField,\n  },\n  array: {\n    default: ArrayField,\n  },\n  object: { default: ObjectField },\n  custom: {\n    default: CustomField,\n    \"date-range\": DateRangeField,\n    \"image-preview\": ImagePreviewField,\n    \"country-select\": CountryField,\n    \"phone-number\": PhoneField,\n  },\n};\n\nexport function getFieldComponent(\n  nativeType: FieldType,\n  customType?: TypeOverride\n) {\n  return TYPE_COMPONENTS_MAP[nativeType][customType || \"default\"];\n}\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/index.ts"
    },
    {
      "path": "./zform/components/fields/number-field.tsx",
      "content": "import React from \"react\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { useFormContext } from \"react-hook-form\";\nimport { ParsedField } from \"../../core/types\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Minus, Plus } from \"lucide-react\";\nimport { ZFieldProps } from \"../../types\";\nimport { useZField } from \"../../context\";\n\nfunction useNumberField(field: ParsedField) {\n  const { register, setValue, getValues } = useFormContext();\n  const { id, name } = useFormField();\n  const { type, key, required } = field;\n  const value: number = getValues(name) || 0;\n  const increment = (step: number) => {\n    setValue(name, value + step);\n  };\n\n  const decrement = (step: number) => {\n    setValue(name, value - step);\n  };\n  return {\n    type,\n    key,\n    required,\n    id,\n    value,\n    increment,\n    decrement,\n    ...register(name, { valueAsNumber: true }),\n  };\n}\n\nexport const NumberField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, ...other } = useNumberField(field);\n  const { inputProps } = useZField(field, path);\n  return <Input key={key} {...other} {...inputProps} />;\n};\n\nexport const StepperField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, id, increment, decrement, value } = useNumberField(field);\n  const { inputProps } = useZField(field, path);\n\n  const step = inputProps?.step ? Number(inputProps.step) : 1;\n  const max = inputProps?.max\n    ? Number(inputProps.max)\n    : Number.MAX_SAFE_INTEGER;\n  const min = inputProps?.min\n    ? Number(inputProps.min)\n    : Number.MIN_SAFE_INTEGER;\n\n  return (\n    <div key={key} id={id} className=\"flex items-center space-x-2\">\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"icon\"\n        onClick={() => decrement(step)}\n        aria-label=\"Decrement\"\n        disabled={min >= value}\n      >\n        <Minus />\n      </Button>\n      <Badge variant=\"outline\" className=\"size-10 text-center\">\n        <span className=\"text-lg font-semibold m-auto\">{value}</span>\n      </Badge>\n      <Button\n        type=\"button\"\n        variant=\"outline\"\n        size=\"icon\"\n        onClick={() => increment(step)}\n        disabled={max <= value}\n        aria-label=\"Increment\"\n      >\n        <Plus />\n      </Button>\n    </div>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/number-field.tsx"
    },
    {
      "path": "./zform/components/fields/object-field.tsx",
      "content": "import React from \"react\";\nimport { ZField } from \"../../field\";\nimport { ParsedField } from \"../../core/types\";\nimport { useZField } from \"../../context\";\n\nexport const ObjectField: React.FC<{\n  field: ParsedField;\n  path: string[];\n}> = ({ field, path }) => {\n  const { className, fieldLabel, fieldDescription } = useZField(field, path);\n  return (\n    <fieldset className={className}>\n      <legend className=\"p-2\">\n        <p className=\"font-semibold\">{fieldLabel}</p>\n        <p className=\"text-sm text-muted-foreground\">{fieldDescription}</p>\n      </legend>\n      {Object.entries(field.schema!).map(([, subField]) => (\n        <ZField\n          key={`${path.join(\".\")}.${subField.key}`}\n          field={subField}\n          path={[...path, subField.key]}\n        />\n      ))}\n    </fieldset>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/object-field.tsx"
    },
    {
      "path": "./zform/components/fields/phone-field.tsx",
      "content": "import { Input } from \"@/components/ui/input\";\nimport { useZField } from \"../../context\";\nimport { ZFieldProps } from \"../../types\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { CheckIcon, Globe } from \"lucide-react\";\nimport { useFormContext } from \"react-hook-form\";\nimport { ChangeEventHandler, useRef, useState } from \"react\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { PhoneNumber } from \"../../custom/phone-number\";\nimport { usePhone } from \"../../hooks/use-phone\";\nimport { parseDigits } from \"libphonenumber-js\";\nimport { useCountries } from \"../../hooks/use-countries\";\n\nexport const PhoneField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { inputProps } = useZField(field, path);\n  const { setValue, getValues } = useFormContext();\n  const popoverTriggerRef = useRef<HTMLButtonElement>(null); // Ref for the PopoverTrigger\n  const { name } = useFormField();\n  const { countries, typing } = usePhone();\n  const { getCountryName } = useCountries();\n  const [selectedCountry, selectCountry] =\n    useState<(typeof countries)[number]>();\n  const value = getValues(name) as PhoneNumber;\n  const handleSelect = (code: string) => {\n    const country = countries.find((c) => c.countryCode === code);\n    selectCountry(country);\n    setValue(\n      name,\n      {\n        value: country?.phoneCode,\n        phoneCode: country?.phoneCode,\n        formatted: country?.phoneCode,\n      },\n      { shouldValidate: false }\n    );\n    popoverTriggerRef.current?.click(); // Programmatically close the popover\n  };\n\n  const handleChange: ChangeEventHandler<HTMLInputElement> = (e) => {\n    e.preventDefault();\n    let text = e.target.value;\n    if (!text.startsWith(\"+\")) text = \"+\" + text;\n    const value = parseDigits(text);\n    const formatted = typing.input(text);\n    const phoneCode = typing.getCallingCode();\n    setValue(\n      name,\n      {\n        value,\n        formatted,\n        phoneCode,\n      },\n      { shouldValidate: true }\n    );\n    const country = typing.getCountry();\n    if (country && selectedCountry?.countryCode !== country)\n      selectCountry(countries.find((c) => c.countryCode === country));\n  };\n  return (\n    <Popover>\n      <div className=\"flex\">\n        <PopoverTrigger asChild ref={popoverTriggerRef}>\n          <Button\n            variant={\"outline\"}\n            className={cn(\n              \"font-normal w-10 flex items-center justify-center border-r-0 rounded-r-none\",\n              !value && \"text-muted-foreground\"\n            )}\n            type=\"button\"\n            size=\"icon\"\n          >\n            {selectedCountry ? (\n              <span\n                className=\"h-4 w-6 bg-cover bg-center bg-no-repeat\"\n                style={{ backgroundImage: `url(${selectedCountry.flag})` }}\n              />\n            ) : (\n              <Globe className=\"size-4 opacity-50\" />\n            )}\n          </Button>\n        </PopoverTrigger>\n        <Input\n          className=\"border-l-0 rounded-l-none\"\n          name={name}\n          {...inputProps}\n          value={value?.formatted || \"\"}\n          onChange={handleChange}\n        />\n      </div>\n\n      <PopoverContent className=\"w-[300px] p-0\">\n        <Command>\n          <CommandInput placeholder=\"Search country...\" />\n          <CommandList>\n            <ScrollArea className=\"h-72\">\n              <CommandEmpty>No country found.</CommandEmpty>\n              <CommandGroup>\n                {countries.map(({ countryCode, phoneCode, flag }) => (\n                  <CommandItem\n                    key={`country-${countryCode}`}\n                    className={cn(\n                      \"gap-2\",\n                      value?.phoneCode === phoneCode && \"bg-muted\"\n                    )}\n                    value={getCountryName(countryCode)}\n                    onSelect={() => handleSelect(countryCode)}\n                  >\n                    <span\n                      className=\"h-4 w-6 bg-cover bg-center bg-no-repeat\"\n                      style={{ backgroundImage: `url(${flag})` }}\n                    />\n                    <span>{getCountryName(countryCode)}</span>\n                    <span className=\"ml-auto text-sm\">+{phoneCode}</span>\n                    <CheckIcon\n                      className={`size-4 ${\n                        value?.phoneCode === phoneCode\n                          ? \"opacity-100\"\n                          : \"opacity-0\"\n                      }`}\n                    />\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </ScrollArea>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/phone-field.tsx"
    },
    {
      "path": "./zform/components/fields/select-field.tsx",
      "content": "import React from \"react\";\nimport { useFormContext } from \"react-hook-form\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { ParsedField } from \"../../core/types\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { ZFieldProps } from \"../../types\";\nimport { useZField } from \"../../context\";\n\nfunction useSelectField(field: ParsedField) {\n  const { setValue, getValues } = useFormContext();\n  const { id, name } = useFormField();\n  const { key, required, options } = field;\n  const value = getValues(name);\n  const onValueChange = (value: string) => {\n    setValue(name, value, { shouldValidate: true });\n  };\n  return { key, required, id, name, onValueChange, value, options };\n}\nexport const SelectField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, options, ...props } = useSelectField(field);\n\n  const { selectProps } = useZField(field, path);\n  return (\n    <Select key={key} {...props} {...selectProps}>\n      <SelectTrigger>\n        <SelectValue placeholder=\"Select an option\" />\n      </SelectTrigger>\n      <SelectContent>\n        {options?.map(([value, label]) => (\n          <SelectItem key={value} value={value}>\n            {label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/select-field.tsx"
    },
    {
      "path": "./zform/components/fields/string-field.tsx",
      "content": "import React from \"react\";\nimport { useFormField } from \"@/components/ui/form\";\nimport { useFormContext } from \"react-hook-form\";\nimport { ParsedField } from \"../../core/types\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { EyeIcon, EyeOffIcon } from \"lucide-react\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { ZFieldProps } from \"../../types\";\nimport { useZField } from \"../../context\";\n\nfunction useStringField(field: ParsedField) {\n  const { register } = useFormContext();\n  const { id, name } = useFormField();\n  const { key, required } = field;\n  return { key, required, id, ...register(name) };\n}\n\nexport const TextField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, ...other } = useStringField(field);\n  const { inputProps } = useZField(field, path);\n  return <Input key={key} {...other} {...inputProps} />;\n};\n\nexport const TextareaField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const { key, ...other } = useStringField(field);\n  const { textareaProps } = useZField(field, path);\n  return <Textarea key={key} rows={4} {...other} {...textareaProps} />;\n};\nexport const PasswordField: React.FC<ZFieldProps> = ({ field, path }) => {\n  const [showPassword, setShowPassword] = React.useState(false);\n  const { key, ...other } = useStringField(field);\n  const { inputProps } = useZField(field, path);\n\n  return (\n    <div className=\"relative\">\n      <Input\n        key={key}\n        className=\"hide-password-toggle pr-10\"\n        {...other}\n        type={showPassword ? \"text\" : \"password\"}\n        {...inputProps}\n      />\n      <Button\n        type=\"button\"\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n        onClick={() => setShowPassword((prev) => !prev)}\n      >\n        {showPassword && !other.disabled ? (\n          <EyeIcon className=\"size-4\" aria-hidden=\"true\" />\n        ) : (\n          <EyeOffIcon className=\"size-4\" aria-hidden=\"true\" />\n        )}\n        <span className=\"sr-only\">\n          {showPassword ? \"Hide password\" : \"Show password\"}\n        </span>\n      </Button>\n\n      {/* hides browsers password toggles */}\n      <style>\n        {`\n            .hide-password-toggle::-ms-reveal,\n            .hide-password-toggle::-ms-clear {\n                visibility: hidden;\n                pointer-events: none;\n                display: none;\n            }\n        `}\n      </style>\n    </div>\n  );\n};\n",
      "type": "registry:block",
      "target": "~/zform/components/fields/string-field.tsx"
    }
  ],
  "dependencies": [
    "libphonenumber-js@1",
    "date-fns@3",
    "world-countries@5",
    "react-day-picker@9"
  ]
}